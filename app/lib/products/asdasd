// // app/products/page.tsx
// 'use client';

// import { useEffect, useState } from "react";
// import {
//   getProducts,
//   createProduct,
//   updateProduct,
//   deleteProduct,
//   Product,
// } from "../services/productService";
// import { getCategories, Categories } from "../services/categoriesService";
// import {
//   getRawMaterials,
//   getRecipes,
//   addRecipe,
//   deleteRecipe,
//   RawMaterial,
//   Recipe,
// } from "../services/recipeService"; // Tambahkan layanan resep
// import { supabase } from "../supabaseClient";
// import DashboardLayout from "../components/DashboardLayout";
// import Image from "next/image";

// export default function ProductsPage() {
//   const [products, setProducts] = useState<Product[]>([]);
//   const [categories, setCategories] = useState<Categories[]>([]);
//   const [rawMaterials, setRawMaterials] = useState<RawMaterial[]>([]);
//   const [loading, setLoading] = useState(true);
//   const [submitting, setSubmitting] = useState(false);

//   // FORM STATE
//   const [isFormVisible, setIsFormVisible] = useState(false);
//   const [editingProduct, setEditingProduct] = useState<Product | null>(null);
//   const [formName, setFormName] = useState("");
//   const [formPrice, setFormPrice] = useState("");
//   const [formImage, setFormImage] = useState<File | null>(null);
//   const [previewImage, setPreviewImage] = useState<string | null>(null);
//   const [formCategoryId, setFormCategoryId] = useState<number | null>(null);
//   const [searchTerm, setSearchTerm] = useState("");

//   // RECIPE FORM STATE
//   const [isRecipeFormVisible, setIsRecipeFormVisible] = useState(false);
//   const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);
//   const [recipes, setRecipes] = useState<Recipe[]>([]);
//   const [newMaterialId, setNewMaterialId] = useState<number | null>(null);
//   const [newQuantity, setNewQuantity] = useState("");

//   // FILTER PRODUK BERDASARKAN SEARCH
//   const filteredProducts = products.filter((product) =>
//     product.name.toLowerCase().includes(searchTerm.toLowerCase())
//   );

//   // FETCH DATA
//   const fetchData = async () => {
//     try {
//       setLoading(true);
//       const [productsData, categoriesData, materialsData] = await Promise.all([
//         getProducts(),
//         getCategories(),
//         getRawMaterials(),
//       ]);
//       setProducts(productsData);
//       setCategories(categoriesData);
//       setRawMaterials(materialsData);
//     } catch (error: any) {
//       console.error("Gagal fetch data:", error.message);
//     } finally {
//       setLoading(false);
//     }
//   };

//   useEffect(() => {
//     fetchData();
//   }, []);

//   // UPLOAD GAMBAR KE SUPABASE STORAGE
//   const uploadImage = async (file: File): Promise<string> => {
//     const fileExt = file.name.split(".").pop();
//     const fileName = `${Date.now()}.${fileExt}`;
//     const filePath = `products/${fileName}`;
//     const { error } = await supabase.storage
//       .from("products")
//       .upload(filePath, file);

//     if (error) throw error;
//     const {
//       data: { publicUrl },
//     } = supabase.storage.from("products").getPublicUrl(filePath);
//     return publicUrl;
//   };

//   // SUBMIT FORM PRODUK
//   const handleSubmit = async (e: React.FormEvent) => {
//     e.preventDefault();
//     setSubmitting(true);
//     try {
//       let imageUrl = editingProduct?.image || "";
//       if (formImage) {
//         imageUrl = await uploadImage(formImage);
//       }

//       if (!formCategoryId) {
//         alert("Silahkan pilih kategori produk!");
//         return;
//       }

//       let savedProduct;
//       if (editingProduct) {
//         const updated = await updateProduct(editingProduct.id, {
//           name: formName,
//           price: Number(formPrice),
//           image: imageUrl,
//           categories_id: formCategoryId,
//         });
//         setProducts((prev) =>
//           prev.map((p) => (p.id === editingProduct.id ? updated[0] : p))
//         );
//         savedProduct = updated[0];
//       } else {
//         const created = await createProduct({
//           name: formName,
//           price: Number(formPrice),
//           image: imageUrl,
//           categories_id: formCategoryId,
//         });
//         setProducts((prev) => [...prev, created[0]]);
//         savedProduct = created[0];
//       }
      
//       setIsFormVisible(false);
//       resetForm();
      
//       // Jika produk baru, tampilkan form resep
//       if (!editingProduct) {
//         setSelectedProduct(savedProduct);
//         await fetchRecipes(savedProduct.id);
//         setIsRecipeFormVisible(true);
//       }

//     } catch (error: any) {
//       alert("Error: " + error.message);
//     } finally {
//       setSubmitting(false);
//     }
//   };

//   // DELETE PRODUK
//   const handleDeleteClick = async (productId: number) => {
//     if (!confirm("Apakah Anda yakin ingin menghapus produk ini?")) return;
//     try {
//       await deleteProduct(productId);
//       setProducts((prev) => prev.filter((p) => p.id !== productId));
//       alert(`Produk dengan ID ${productId} berhasil dihapus!`);
//     } catch (error: any) {
//       alert("Gagal menghapus produk: " + error.message);
//     }
//   };

//   // EDIT PRODUK
//   const handleEditClick = (product: Product) => {
//     setEditingProduct(product);
//     setFormName(product.name);
//     setFormPrice(product.price.toString());
//     setPreviewImage(product.image);
//     setFormCategoryId(product.categories_id || null);
//     setIsFormVisible(true);
//   };

//   // RESET FORM PRODUK
//   const resetForm = () => {
//     setEditingProduct(null);
//     setFormName("");
//     setFormPrice("");
//     setFormImage(null);
//     setPreviewImage(null);
//     setFormCategoryId(null);
//   };

//   // KELOLA RESEP
//   const handleViewRecipes = async (product: Product) => {
//     setSelectedProduct(product);
//     await fetchRecipes(product.id);
//     setIsRecipeFormVisible(true);
//   };

//   const fetchRecipes = async (productId: number) => {
//     try {
//       const data = await getRecipes(productId);
//       setRecipes(data);
//     } catch (error: any) {
//       console.error("Gagal mengambil resep:", error.message);
//     }
//   };

//   const handleAddRecipe = async (e: React.FormEvent) => {
//     e.preventDefault();
//     if (!selectedProduct || !newMaterialId || !newQuantity) return;
//     try {
//       await addRecipe(selectedProduct.id, Number(newMaterialId), Number(newQuantity));
//       await fetchRecipes(selectedProduct.id);
//       setNewMaterialId(null);
//       setNewQuantity("");
//     } catch (error: any) {
//       alert("Gagal menambah resep: " + error.message);
//     }
//   };

//   const handleDeleteRecipe = async (recipeId: number) => {
//     if (!confirm("Yakin ingin menghapus bahan ini?")) return;
//     try {
//       await deleteRecipe(recipeId);
//       await fetchRecipes(selectedProduct!.id);
//     } catch (error: any) {
//       alert("Gagal menghapus resep: " + error.message);
//     }
//   };


//   return (
//     <DashboardLayout>
//       <div className="p-4">
//         <div className="flex justify-between mb-6">
//           <h1 className="text-2xl font-bold">Manajemen Produk</h1>
//           <button
//             onClick={() => {
//               resetForm();
//               setIsFormVisible(true);
//             }}
//             className="cursor-pointer bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
//           >
//             Tambah Produk
//           </button>
//         </div>

//         {/* SEARCH BAR */}
//         <div className="mb-6">
//           <input
//             type="text"
//             placeholder="Cari produk..."
//             value={searchTerm}
//             onChange={(e) => setSearchTerm(e.target.value)}
//             className="w-full p-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
//           />
//         </div>

//         {/* FORM PRODUK */}
//         {isFormVisible && (
//           <form
//             onSubmit={handleSubmit}
//             className="mb-6 p-4 rounded dark:bg-gray-900"
//           >
//             <h1 className="mb-5 font-bold text-3xl">
//               {editingProduct ? "Edit Produk" : "Tambah Produk"}
//             </h1>

//             {/* NAMA PRODUK */}
//             <div className="mb-3">
//               <label className="block font-bold mb-1">Nama Produk</label>
//               <input
//                 type="text"
//                 value={formName}
//                 onChange={(e) => setFormName(e.target.value)}
//                 className="w-full p-2 border rounded"
//                 required
//               />
//             </div>

//             {/* HARGA PRODUK */}
//             <div className="mb-3">
//               <label className="block font-bold mb-1">Harga Produk</label>
//               <input
//                 type="number"
//                 value={formPrice}
//                 onChange={(e) => setFormPrice(e.target.value)}
//                 className="w-full p-2 border rounded"
//                 required
//               />
//             </div>

//             {/* KATEGORI */}
//             <div className="mb-3">
//               <label className="block font-bold mb-1">Kategori Produk</label>
//               <select
//                 value={formCategoryId || ""}
//                 onChange={(e) => setFormCategoryId(Number(e.target.value))}
//                 className="w-full p-2 border rounded"
//                 required
//               >
//                 <option value="" disabled>
//                   Pilih kategori
//                 </option>
//                 {categories.map((cat) => (
//                   <option key={cat.id} value={cat.id}>
//                     {cat.name}
//                   </option>
//                 ))}
//               </select>
//             </div>

//             {/* GAMBAR PRODUK */}
//             <div className="mb-3 font-bold">
//               <label className="block mb-1">Gambar Produk</label>
//               <input
//                 className="cursor-pointer"
//                 type="file"
//                 accept="image/*"
//                 onChange={(e) => {
//                   if (e.target.files?.[0]) {
//                     setFormImage(e.target.files[0]);
//                     setPreviewImage(URL.createObjectURL(e.target.files[0]));
//                   }
//                 }}
//               />
//               {previewImage && (
//                 <img
//                   src={previewImage}
//                   alt="Preview"
//                   className="mt-2 w-32 h-32 object-cover rounded"
//                 />
//               )}
//             </div>

//             {/* BUTTONS */}
//             <div className="flex gap-2 font-bold">
//               <button
//                 type="submit"
//                 disabled={submitting}
//                 className="bg-green-600 cursor-pointer text-white px-4 py-2 rounded hover:bg-green-700 disabled:opacity-50"
//               >
//                 {submitting
//                   ? "Menyimpan..."
//                   : editingProduct
//                   ? "Update Produk"
//                   : "Simpan Produk"}
//               </button>
//               <button
//                 type="button"
//                 onClick={() => {
//                   resetForm();
//                   setIsFormVisible(false);
//                 }}
//                 className="bg-gray-400 cursor-pointer text-white px-4 py-2 rounded hover:bg-gray-500"
//               >
//                 Batal
//               </button>
//             </div>
//           </form>
//         )}

//         {/* FORM RESEP */}
//         {isRecipeFormVisible && selectedProduct && (
//           <div className="bg-white p-6 rounded-lg shadow-md mb-6">
//             <h2 className="text-2xl font-semibold mb-4">
//               Resep untuk: {selectedProduct.name}
//             </h2>
            
//             {/* Tabel Resep */}
//             <table className="w-full mb-4">
//               <thead>
//                 <tr>
//                   <th className="border px-4 py-2">Bahan Baku</th>
//                   <th className="border px-4 py-2">Kuantitas</th>
//                   <th className="border px-4 py-2">Aksi</th>
//                 </tr>
//               </thead>
//               <tbody>
//                 {recipes.map((recipe) => (
//                   <tr key={recipe.id}>
//                     <td className="border px-4 py-2">
//                       {rawMaterials.find(m => m.id === recipe.material_id)?.name}
//                     </td>
//                     <td className="border px-4 py-2">
//                       {recipe.quantity_needed}
//                     </td>
//                     <td className="border px-4 py-2">
//                       <button
//                         onClick={() => handleDeleteRecipe(recipe.id)}
//                         className="bg-red-600 text-white px-2 py-1 rounded hover:bg-red-700"
//                       >
//                         Hapus
//                       </button>
//                     </td>
//                   </tr>
//                 ))}
//               </tbody>
//             </table>

//             {/* Form Tambah Resep */}
//             <form onSubmit={handleAddRecipe} className="flex gap-2">
//               <select
//                 value={newMaterialId || ""}
//                 onChange={(e) => setNewMaterialId(Number(e.target.value))}
//                 className="flex-1 p-2 border rounded"
//                 required
//               >
//                 <option value="" disabled>Pilih Bahan</option>
//                 {rawMaterials.map((material) => (
//                   <option key={material.id} value={material.id}>
//                     {material.name} ({material.unit})
//                   </option>
//                 ))}
//               </select>
//               <input
//                 type="number"
//                 value={newQuantity}
//                 onChange={(e) => setNewQuantity(e.target.value)}
//                 placeholder="Jumlah"
//                 className="w-24 p-2 border rounded"
//                 required
//               />
//               <button
//                 type="submit"
//                 className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
//               >
//                 Tambah
//               </button>
//             </form>
            
//             <button
//               onClick={() => setIsRecipeFormVisible(false)}
//               className="mt-4 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 w-full"
//             >
//               Selesai
//             </button>
//           </div>
//         )}

//         {/* TABEL PRODUK */}
//         {loading ? (
//           <div className="text-center text-gray-500">Memuat data...</div>
//         ) : products.length === 0 ? (
//           <div className="text-center text-gray-500">
//             Produk kosong, silahkan tambah produk terlebih dahulu.
//           </div>
//         ) : (
//           <table className="w-full">
//             <thead>
//               <tr className="dark:bg-gray-900">
//                 <th className="border px-4 py-2">No</th>
//                 <th className="border px-4 py-2">Nama</th>
//                 <th className="border px-4 py-2">Harga</th>
//                 <th className="border px-4 py-2">Kategori</th>
//                 <th className="border px-4 py-2">Gambar</th>
//                 <th className="border px-4 py-2">Aksi</th>
//               </tr>
//             </thead>
//             <tbody>
//               {filteredProducts.map((p, index) => (
//                 <tr key={p.id}>
//                   <td className="border text-center px-4 py-2">{index + 1}</td>
//                   <td className="border text-center px-4 py-2">{p.name}</td>
//                   <td className="border text-center px-4 py-2">
//                     Rp {p.price.toLocaleString()}
//                   </td>
//                   <td className="border text-center px-4 py-2">
//                     {categories.find((c) => c.id === p.categories_id)?.name || "-"}
//                   </td>
//                   <td className="border text-center px-4 py-2">
//                     {p.image ? (
//                       <Image
//                         src={p.image}
//                         alt={p.name}
//                         width={100}
//                         height={100}
//                         className="rounded mx-auto"
//                         unoptimized
//                       />
//                     ) : (
//                       <div className="w-12 h-12 flex items-center justify-center bg-gray-700 rounded-full mx-auto">
//                         {p.name.charAt(0)}
//                       </div>
//                     )}
//                   </td>
//                   <td className="border px-4 py-2 text-center space-x-2">
//                     <button
//                       onClick={() => handleEditClick(p)}
//                       className="bg-gray-400 text-white px-2 py-1 rounded hover:bg-gray-600 cursor-pointer font-semibold"
//                     >
//                       Edit
//                     </button>
//                     <button
//                       onClick={() => handleDeleteClick(p.id)}
//                       className="bg-red-600 text-white px-2 py-1 rounded hover:bg-red-700 cursor-pointer font-semibold"
//                     >
//                       Hapus
//                     </button>
//                     <button
//                       onClick={() => handleViewRecipes(p)}
//                       className="bg-blue-600 text-white px-2 py-1 rounded hover:bg-blue-700 cursor-pointer font-semibold"
//                     >
//                       Resep
//                     </button>
//                   </td>
//                 </tr>
//               ))}
//             </tbody>
//           </table>
//         )}
//       </div>
//     </DashboardLayout>
//   );
// }